group = project.maven_group as Object


checkstyle {
	configFile = rootProject.file('/checkstyle.xml')
	toolVersion = project.checkstyle_version
}


configurations {
	modRuntimeOnly {
		transitive = true
		exclude module: 'fabric-loader'
	}
}


repositories {
	if (project.use_third_party_mods == 'true') {
		maven {
			name = 'Modrinth'
			url = 'https://api.modrinth.com/maven'
			content {
				includeGroup 'maven.modrinth'
			}
		}
		maven {
			url = 'https://cursemaven.com'
			content {
				includeGroup 'curse.maven'
			}
		}
	}
	maven {
		name = 'TerraformersMC'
		url = 'https://maven.terraformersmc.com/releases'
	}
	maven {
		url = 'https://maven.shedaniel.me/'
	}
	maven {
		name = 'JitPack'
		url = 'https://jitpack.io'
	}
	maven {
		name = 'NucleoidMC'
		url = 'https://maven.nucleoid.xyz/'
	}
	mavenCentral()
}


dependencies {
	modImplementation "net.fabricmc:fabric-loader:${project.fabric_loader_version}"
}


processResources {
	inputs.property 'version', project.version

	filesMatching('fabric.mod.json') {
		expand 'version': project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	// Ensure that the encoding is set to UTF-8, no matter what the system default is.
	// This fixes some edge cases with special characters not displaying correctly,
	// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html.
	// If Javadoc is generated, this must be specified in that task too.
	it.options.encoding = 'UTF-8'
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present. If you remove this line, sources will not be generated.
	withSourcesJar()

	// If this mod is going to be a library, then it should also generate Javadocs in order to aid
	// with development. Uncomment this line to generate them.
	// withJavadocJar()
}
